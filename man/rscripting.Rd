% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/scripttools-package.R
\docType{package}
\name{rscripting}
\alias{rscripting}
\alias{rscripting-package}
\title{rscripting: A package for simplified argument parsing, logging, configuration files and file/directory archiving.}
\description{
rscripting: A package for simplified argument parsing, logging, configuration files and file/directory archiving.
}
\section{Argument parsing}{


Convenience handling of Rscript arguments modeled after Python's
   argparse module.

Overview

This page describes useage of CommandArgs RefClass which is strongly
modeled after Python's argparse module and ArgumentParser class. In general this package
may provide utility when using Rscript.  A simple example is
provided below.  See argparse for details...
\url{http://docs.python.org/dev/library/argparse.html}
}

\section{Logging}{


Generating mesasges for file and console.

Overview

   A simple logger to allow info/warn/error messaging.
   Logged messages are possibly sent to a regular file, but the user can
   opt to echo the messages to the console. Also included is a simple
   Stopwatch class for multi-part timing as well as a Timekeeper class which
   will manage one or more stopwatches.

   A LoggerRefClass object contains a TimekeeperRefClass object.
   A TimekeeperRefClass object contains a list of one or more StopwatchRefClass objects referred to by name
   A StopwatchRefClass contains one or more intervals referred to by 'interval'
}

\section{Configurations}{


Overview

A small set of tools for managing configuration files, formatted like INI files in Windows.
See \url{http://effbot.org/librarybook/configparser.htm} and
\url{http://docs.python.org/release/2.6.8/library/configparser.html} for inspiration.
}
\examples{
\dontrun{
# define a vector af arguments, usually the value of commandArgs(trailingOnly = FALSE)
# but in this example we have contrived a variety of space-delimited arguments

args <- c("/Library/Frameworks/R.framework/Resources/bin/exec/R", "--slave",
   "--no-restore", "--vanilla",
   "--file /Users/Shared/code/R/test-scripts/commandArgs.Rscript",
   "--args", "-bob", "-no-bob" , "zip=", "itty", "doodah")

# define a function called when the value of an argument is retrieved, you'll
# see this when we define the 'dog' argument below. Note that the first argument
# is the ArgumentRefClass object and the the value is the first element of the
# \\code{value} field which may more than one element.
squareDog <- function(x, ...){
   x$value[[1]]^2
}

# create CommandArgs instance using our dummy arguments
X <- CommandArgs(args)

# define 4 different arguments, two logicals, one with an 'action' and one with multiple elements
X$add_argument("bob", type = "set_true", default = FALSE)
X$add_argument("nobob", flag = "--no-bob", type = "set_false", default = TRUE)
X$add_argument("dog", type = "numeric", default = 3,
   required = FALSE, action = 'squareDog')
X$add_argument("zip", type = "character", narg = 2,
   choices = c("itty", "bitty", "doodah", "boom"), default = "boom")

#run the parser
X$parse_arguments()

# print the whole shebang
X$show()

#  get the values of the arguments
X$get("dog")
X$get("bob")
X$get("zip")
}
}

